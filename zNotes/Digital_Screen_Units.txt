+-------+------------------------------+-----------------------------+
| Unit  | Description                  | When to Use                 |
+-------+------------------------------+-----------------------------+
| px    | Fixed pixels, ideal for       | When you need fixed,        |
|       | precise measurements         | pixel-perfect control       |
+-------+------------------------------+-----------------------------+
| %     | Percentage, relative to the   | For flexible layouts that   |
|       | parent element               | adapt to parent elements    |
+-------+------------------------------+-----------------------------+
| em    | Relative to the parent        | For scalable, flexible      |
|       | element's font size          | designs (padding, margins)  |
+-------+------------------------------+-----------------------------+
| rem   | Relative to the root element’s| For consistent global       |
|       | font size                    | sizing                      |
+-------+------------------------------+-----------------------------+
| vh    | Relative to the viewport's    | For full-height elements    |
|       | height                       | and vertical responsiveness |
+-------+------------------------------+-----------------------------+
| vw    | Relative to the viewport's    | For horizontal              |
|       | width                        | responsiveness              |
+-------+------------------------------+-----------------------------+
| vmin  | Smaller of vw or vh           | For square elements or      |
|       |                              | maintaining ratio across    |
|       |                              | views                       |
+-------+------------------------------+-----------------------------+
| vmax  | Larger of vw or vh            | When you need to scale with |
|       |                              | the larger dimension        |
+-------+------------------------------+-----------------------------+



1. px (Pixels)
* Description: px is an absolute unit of measurement in CSS that corresponds to a single pixel on the screen. It's commonly used to specify fixed sizes, like width, height, margin, padding, etc.
*When to Use: You should use px when you want to have precise control over the size of elements. For example, when designing buttons, icons, or any UI components where exact measurements are needed, px gives you control down to the pixel level.

2. % (Percentage)
* Description: The percentage (%) unit is relative to the parent element. This means if you set an element’s width to 50%, it will take up half of its parent’s width.
* When to Use: Percentage is perfect for fluid layouts. It allows elements to resize dynamically based on the size of their parent container, making it ideal for responsive design. For instance, using percentages ensures that a layout adjusts when viewed on different screen sizes.

3. em (Relative to the Parent's Font Size)
* Description: The em unit is a relative unit. It’s based on the font size of the parent element. So, 1em equals the parent’s font size, while 2em would be twice that size.
* When to Use: em is often used for scalable designs. It’s especially useful for creating flexible padding, margin, and spacing that scale with the text size. Be mindful of nested elements, as em values can compound, leading to larger sizes than expected.
* Example:
font-size: 2em;  /* 2 times the font size of the parent element */
padding: 1em;    /* Padding equals the parent font size */

4. rem (Relative to the Root Element's Font Size)
* Description: The rem unit is also a relative unit, but it’s relative to the font size of the root element (usually the <html> element). By default, most browsers set the root font size to 16px, so 1rem usually equals 16px.
* When to Use: rem is preferred over em for consistent sizing throughout a project. Since rem is relative to the root element, it doesn’t compound like em does. Use rem when you want consistent sizing across your site, such as for global typography, margins, and padding.
* Example:
font-size: 1.5rem; /* 1.5 times the root element font size (typically 24px) */
margin: 2rem;      /* 2 times the root font size (32px) */

5. vh (Viewport Height)
* Description: vh stands for viewport height, where 1vh equals 1% of the height of the browser window. The entire height of the viewport is represented as 100vh.
* When to Use: Use vh when you want an element’s height to adjust relative to the viewport’s height. This is particularly useful for creating full-screen sections or components that need to scale based on the screen height, regardless of the content within the element.
* Example:
height: 100vh;  /* Takes up the full height of the viewport */

6. vw (Viewport Width)
* Description: vw stands for viewport width, where 1vw equals 1% of the browser window’s width. 100vw represents the entire width of the viewport.
* When to Use: Use vw for horizontal responsiveness. It’s useful when you want elements to scale horizontally based on the size of the viewport, such as images, containers, or even font sizes that adapt to the width of the screen.
* Example:
width: 50vw;  /* Takes up 50% of the viewport’s width */

7. vmin (Viewport Minimum)
* Description: The vmin unit represents the smaller of the viewport's width (vw) or height (vh). This means if the viewport is in landscape mode, vmin would equal vh, but if it’s in portrait mode, it would equal vw.
* When to Use: vmin is ideal for creating square elements or designs that need to scale equally across different viewport sizes and orientations. It’s a good choice when you want an element to be responsive but maintain a consistent aspect ratio.
* Example:
width: 50vmin;  /* Takes up 50% of the smaller dimension (width or height) */
Iska matlab hai ki element ka width viewport ke jo bhi chhota dimension hai (width ya height), uska aadha hoga. Example ke taur pe, agar viewport ki width 800px hai aur height 600px, toh element ka width 50vmin hoga 300px (kyunki 600px chhota dimension hai).

8. vmax (Viewport Maximum)
* Description: The vmax unit represents the larger of the viewport's width (vw) or height (vh). If the viewport is wider than it is tall (landscape mode), vmax will equal vw; if taller, it will equal vh.
* When to Use: Use vmax when you want elements to scale based on the larger dimension of the viewport. This can be useful for large backgrounds or elements that need to grow with the viewport, regardless of its orientation.
* Example:
width: 50vmax;  /* Takes up 50% of the larger viewport dimension */
